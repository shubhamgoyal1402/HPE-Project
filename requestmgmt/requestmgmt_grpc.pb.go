// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: requestmgmt/requestmgmt.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RequestManagement_CreateRequest_FullMethodName = "/requestmgmt.RequestManagement/CreateRequest"
)

// RequestManagementClient is the client API for RequestManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestManagementClient interface {
	CreateRequest(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Request, error)
}

type requestManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestManagementClient(cc grpc.ClientConnInterface) RequestManagementClient {
	return &requestManagementClient{cc}
}

func (c *requestManagementClient) CreateRequest(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, RequestManagement_CreateRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestManagementServer is the server API for RequestManagement service.
// All implementations must embed UnimplementedRequestManagementServer
// for forward compatibility
type RequestManagementServer interface {
	CreateRequest(context.Context, *NewRequest) (*Request, error)
	mustEmbedUnimplementedRequestManagementServer()
}

// UnimplementedRequestManagementServer must be embedded to have forward compatible implementations.
type UnimplementedRequestManagementServer struct {
}

func (UnimplementedRequestManagementServer) CreateRequest(context.Context, *NewRequest) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequest not implemented")
}
func (UnimplementedRequestManagementServer) mustEmbedUnimplementedRequestManagementServer() {}

// UnsafeRequestManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestManagementServer will
// result in compilation errors.
type UnsafeRequestManagementServer interface {
	mustEmbedUnimplementedRequestManagementServer()
}

func RegisterRequestManagementServer(s grpc.ServiceRegistrar, srv RequestManagementServer) {
	s.RegisterService(&RequestManagement_ServiceDesc, srv)
}

func _RequestManagement_CreateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestManagementServer).CreateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestManagement_CreateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestManagementServer).CreateRequest(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestManagement_ServiceDesc is the grpc.ServiceDesc for RequestManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requestmgmt.RequestManagement",
	HandlerType: (*RequestManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRequest",
			Handler:    _RequestManagement_CreateRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "requestmgmt/requestmgmt.proto",
}
